<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_damage</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>duration = 5;
depth = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_lightsaber.slashing &gt; 0){
    if(obj_player.orientation == -1){
        x = obj_player.x - obj_player.orientation * obj_lightsaber.slash_radius * cos(obj_lightsaber.slash_angle);
        y = obj_player.y - obj_lightsaber.slash_radius * sin(obj_lightsaber.slash_angle);
    }else{
        x = obj_player.x + obj_player.orientation * obj_lightsaber.slash_radius * cos(obj_lightsaber.slash_angle);
        y = obj_player.y - obj_lightsaber.slash_radius * sin(obj_lightsaber.slash_angle);
    }
}

if(obj_player.dash_duration &gt; 0){
    if(obj_player.orientation == -1){
        slash_angle = degtorad(point_direction(obj_player.x, obj_player.y, mouse_x, mouse_y));
        if(slash_angle &lt; pi/2 || slash_angle &gt; 3*pi/2){slash_angle = pi}
        x = obj_player.x - obj_player.orientation * obj_lightsaber.slash_radius * cos(obj_lightsaber.slash_angle);
        y = obj_player.y - obj_lightsaber.slash_radius * sin(obj_lightsaber.slash_angle);
        image_angle = radtodeg(slash_angle);
    }else{
        slash_angle = degtorad(point_direction(obj_player.x, obj_player.y, mouse_x, mouse_y));
        if(slash_angle &gt; pi/2 &amp;&amp; slash_angle &lt; 3*pi/2){slash_angle = 0}
        x = obj_player.x + obj_player.orientation * obj_lightsaber.slash_radius * cos(obj_lightsaber.slash_angle);
        y = obj_player.y - obj_lightsaber.slash_radius * sin(obj_lightsaber.slash_angle);
        image_angle = radtodeg(slash_angle);
    }
}

if(duration &lt;= 0){
    instance_destroy();
}

if(duration &gt; 0){duration--}

if(obj_player.dash_duration &gt; 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
