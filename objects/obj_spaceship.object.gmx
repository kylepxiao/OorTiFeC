<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spaceship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -100;
acc = 0.75;
decc = 1.1;
spd = 10;
hsp = 0;
vsp = 0;
laser_cooldown = 0;
max_hp = 15;
max_energy = 100;
hp = max_hp;
energy = max_energy;
dash_duration = 0;
dash_speed = 25;
dead = false;
if(room == Room_4_1){
    max_hp = 50;
    hp = max_hp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
hp = max_hp;
dead = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible &amp;&amp; !dead){
key_right = keyboard_check(vk_right) || keyboard_check(ord('D'));
key_left = -(keyboard_check(vk_left) || keyboard_check(ord('A')));
key_up = keyboard_check(vk_up) || keyboard_check(ord('W'));
key_down = keyboard_check(vk_down) || keyboard_check(ord('S'));
mouse_shoot = mouse_check_button(mb_left);
key_dash = mouse_check_button_pressed(mb_right);

if(keyboard_check_pressed(vk_space) &amp;&amp; energy &gt;= 100){
    audio_play_sound(asteroid_destroy, 10, false);
    with(obj_enemy){instance_destroy()}
    with(obj_asteroid_steel){
        script_spawn_asteroid_debris(x, y, 8);
        instance_destroy();
    }
    with(obj_asteroid_small_A){
        script_spawn_asteroid_debris(x, y, 2);
        instance_destroy();
    }
    with(obj_asteroid_ice){
        script_spawn_ice_debris(x, y, 8);
        instance_destroy();
    }
    with(obj_asteroid_ice_shard){
        script_spawn_ice_debris(x, y, 2);
        instance_destroy();
    }
    instance_create(0, 0, obj_flash);
    energy = 0;
}

if(dash_duration &lt;= 0){
    hsp += (key_left + key_right) * acc;
    vsp += (key_down - key_up) * acc;
}

if(abs(hsp) &gt; spd &amp;&amp; dash_duration &lt;= 0){
    hsp = sign(hsp) * spd;
}
if(abs(vsp) &gt; spd &amp;&amp; dash_duration &lt;= 0){
    vsp = sign(vsp) * spd;
}

//make sure ship doesn't go outside boundaries
if(view_xview[0] &lt; x+hsp &amp;&amp; view_xview[0] + view_wview[0] &gt; x+hsp){
    x += hsp;
}
if(view_yview[0] &lt; y+vsp &amp;&amp; view_yview[0] + view_hview[0] &gt; y+vsp){
    y += vsp;
}

//friction
if(key_left + key_right == 0 &amp;&amp; dash_duration &lt;= 0){
    hsp /= decc;
}
if(key_down - key_up == 0 &amp;&amp; dash_duration &lt;= 0){
    vsp /= decc;
}

//laser
if(mouse_shoot &amp;&amp; laser_cooldown &lt;= 0){
    mouse_angle = point_direction(x, y, mouse_x, mouse_y);
    script_spawn_laser(x + cos(degtorad(mouse_angle-90))*10, y - sin(degtorad(mouse_angle-90))*10 + 10);
    script_spawn_laser(x + cos(degtorad(mouse_angle+90))*10, y - sin(degtorad(mouse_angle+90))*10 + 10);
    laser_cooldown = 15;
}

if(energy &gt;= 18){
    if(keyboard_check_pressed(ord('Q'))){
        dash_duration = 15;
        hsp = -dash_speed;
        image_xscale = 1;
        energy -= 18;
    }else if(keyboard_check_pressed(ord('E'))){
        dash_duration = 15;
        hsp = dash_speed;
        image_xscale = 1;
        energy -= 18;
    }else if(mouse_check_button_pressed(mb_right)){
        dash_duration = 15;
        hsp = sign(mouse_x - x) * dash_speed;
        image_xscale = 1;
        energy -= 18;
    }
}

if(hp &lt;= 0){
/*    show_message("You Lose!");
    hp = max_hp;
    energy = max_energy;*/
    if(room == Room_4_1){
        script_spawn_wreckage(x, y, 64);
        visible = false;
        dead = true;
        alarm[0] = 180;
    }else{
        room_goto_next();
        instance_destroy();
    }
}

if(laser_cooldown &gt; 0){laser_cooldown--}
if(energy &lt; max_energy){energy += 0.25}
if(dash_duration &gt; 0){
    dash_duration--
    image_xscale -= 2/15;
}else{
    image_xscale = 1;
}


projectile = instance_place(x, y, obj_enemy);
if projectile != noone &amp;&amp; dash_duration &lt;= 0{
    hp -= projectile.damage / 20;
    audio_play_sound(chomp, 10, false);
}
}

if(!dead){
if(global.spaceship_hit%4 == 0 || global.spaceship_hit%4 == 1){
    visible = true;
}else{
    visible = false;
}

if(global.spaceship_hit &gt; 0) global.spaceship_hit--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_healthbar(x-25, y-51, x+25, y-45, 100*(hp/max_hp), c_black, c_red, c_red, 0, true, true);
draw_healthbar(x-25, y-45, x+25, y-42, 100*(energy/max_energy), c_black, c_blue, c_blue, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
